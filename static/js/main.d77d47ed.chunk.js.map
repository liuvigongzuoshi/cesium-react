{"version":3,"sources":["stores/modules/appViewer.js","stores/index.js","containers/AppViewer/ImageryLayers.js","containers/AppViewer/GeoJson.js","containers/AppViewer/Czml.js","containers/AppViewer/EventHandler.js","containers/AppViewer/Entitys.js","containers/AppViewer/index.js","containers/ToolBar/index.js","containers/LocationBar/index.js","App.tsx","utils/serviceWorker.ts","index.tsx","../external \"Cesium\"","containers/LocationBar/index.module.css","App.module.css","containers/ToolBar/index.module.css"],"names":["td_img_imageryProvider","url","layer","style","format","tileMatrixSetID","maximumLevel","td_cia_imageryProvider","appViewer","cesiumAccessToken","imageryProviders","observable","action","destination","_this","czmlData","_this2","geoJsonData","_this3","positionData","_this4","stores","ImageryLayers","console","log","react_default","a","createElement","resium_es","this","props","map","item","i","key","imageryProvider","WebMapTileServiceImageryProvider","PureComponent","withCesium","_ref","cesium","data","onLoad","viewer","flyTo","CzmlDataSource","EventHandler","inject","e","endPosition","_this$props","_this$props$cesium","camera","globe","setPositionData","Cartesian2","ellipsoid","arguments","length","undefined","Ellipsoid","WGS84","cartesian","pickEllipsoid","defined","cartographic","cartesianToCartographic","longitude","CesiumMath","toDegrees","toFixed","latitude","elevation","Math","ceil","getHeight","long","lat","height","positionCartographic","getMousePointPosition","_handleMouseMoveEvent","bind","type","ScreenSpaceEventType","MOUSE_MOVE","Entitys","entityPosition","Cartesian3","fromDegrees","name","position","pixelSize","color","Color","CRIMSON","outlineWidth","outlineColor","LIGHTCORAL","Ion","defaultAccessToken","appViewerStore","AppViewer","observer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","scene","debugShowFramesPerSecond","cesiumWidget","creditContainer","display","tileset","zoomTo","_this$props$appViewer","CesiumTerrainProvider","IonResource","fromAssetId","full","animation","shouldAnimate","baseLayerPicker","timeline","geocoder","ref","cesiumElement","AppViewer_ImageryLayers","AppViewer_EventHandler","AppViewer_Entitys","AppViewer_GeoJson","AppViewer_Czml","Component","czmlMenu","menu","onClick","__webpack_require__","then","t","_ref2","czmlBox","default","setCzmlData","_ref3","satelliteCzml","_ref4","dynamicPoint","_ref5","pathCzml","Item","geoJsonMenu","_ref6","_ref7","pointGeoJson","setGeoJsonData","_ref8","simplestylesGeojson","_ref9","statestopoGeojson","ToolBar","_className","concat","styles","toolbar","className","dropdown","overlay","es_button","marginRight","marginBottom","icon","LocationBar","locationbar","locationcamera","distancelegend","App","react","containers_ToolBar","containers_LocationBar","containers_AppViewer","React","Boolean","window","location","hostname","match","ReactDOM","render","mobx_react_module","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","Cesium"],"mappings":"uQAIMA,EAAyB,CAC7BC,IACE,uOACFC,MAAO,gBACPC,MAAO,UACPC,OAAQ,aACRC,gBAAiB,uBACjBC,aAAc,IAEVC,EAAyB,CAC7BN,IACE,8NACFC,MAAO,eACPC,MAAO,UACPC,OAAQ,aACRC,gBAAiB,uBACjBC,aAAc,IA4BDE,EAAA,4CApBbC,kBAzBA,wNA0BAT,uBAAyBA,OACzBO,uBAAyBA,OACzBG,iBAAmB,CAACV,EAAwBO,0WAE3CI,8EAVc,iDAWdA,8EAZiB,iDAajBA,8EAXiB,kDAYjBA,8EAXkB,oDAalBC,yFACgB,SAAAC,GAAW,OAAKC,EAAKD,YAAcA,+CACnDD,yFACa,SAAAG,GAAQ,OAAKC,EAAKD,SAAWA,kDAC1CH,yFACgB,SAAAK,GAAW,OAAKC,EAAKD,YAAcA,mDACnDL,yFACiB,SAAAO,GAAY,OAAKC,EAAKD,aAAeA,SC3C1CE,EAAA,CACbb,qEC6Bac,mLAVX,OADAC,QAAQC,IAAI,wBAEVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGC,KAAKC,MAAMpB,iBAAiBqB,IAAI,SAACC,EAAMC,GACtC,OAAOR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcM,IAAKD,EAAGE,iBAlBfA,EAkBgDH,EAlB7B,IAAII,mCAAiCD,MAAxD,IAAAA,YAYIE,iBCVbC,cANC,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,OAAQvB,EAAkBsB,EAAlBtB,YACzB,OAAOA,EACLQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBa,KAAMxB,EAAayB,OAAQ,SAAAzB,GAAW,OAAIuB,EAAOG,OAAOC,MAAM3B,MAC/E,OCGSqB,cANF,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,OAAQzB,EAAewB,EAAfxB,SACtB,OAAOA,EACLU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBa,KAAM1B,EAAU2B,OAAQ,SAAAG,GAAc,OAAIL,EAAOG,OAAOC,MAAMC,MAC5E,OCgCAC,EADLC,YAAO,oMAEOC,GACXzB,QAAQC,IAAIwB,oDAGyB,IAAfC,EAAeV,EAAfU,YAAeC,EAIjCrB,KAAKC,MAJ4BqB,EAAAD,EAEnCV,OAAUY,EAFyBD,EAEzBC,OAAQC,EAFiBF,EAEjBE,MACLC,EAHsBJ,EAGnC1C,UAAa8C,gBAETnC,EAlCoB,SAACiC,EAAQC,EAAOE,GAA4C,IAAhCC,EAAgCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBG,YAAUC,MAExEC,EAAYV,EAAOW,cAAcR,GACvC,IAAKS,kBAAQF,GAAY,OAAO,KAGhC,IAAMG,EAAeT,EAAUU,wBAAwBJ,GAEjDK,EAAYC,OAAWC,UAAUJ,EAAaE,WAAWG,QAAQ,GACjEC,EAAWH,OAAWC,UAAUJ,EAAaM,UAAUD,QAAQ,GAE/DE,EAAYC,KAAKC,KAAKrB,EAAMsB,UAAUV,IAI5C,MAAO,CACLW,KAAMT,EACNU,IAAKN,EACLO,OALaL,KAAKC,KAAKtB,EAAO2B,qBAAqBD,QAAUN,EAM7DA,UAAWA,GAeUQ,CAAsB5B,EAAQC,EAAOJ,GAC1D,IAAK9B,EAAc,OAAO,EAC1BmC,EAAgBnC,oCAIhB,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAkBhB,OAAQiB,KAAKoD,sBAAsBC,KAAKrD,MAAOsD,KAAMC,uBAAqBC,qBAlBzEhD,qBAwBZC,cAAWQ,GC3CXwC,mLAbX,IAAMC,EAAiBC,aAAWC,YAAY,YAAa,WAAY,KACvE,OACEhE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ8D,KAAK,QAAQC,SAAUJ,GAC7B9D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAegE,UAAW,GAAIC,MAAOC,QAAMC,QAASC,aAAc,EAAGC,aAAcH,QAAMI,aACzFzE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,4CARYU,iBCOtB8D,MAAIC,mBAAqBC,EAAe5F,0BAgEzB6F,EA9DdvD,YAAO,eACPwD,0BAEC,SAAAD,EAAYxE,GAAO,IAAAhB,EAAA,OAAA0F,OAAAC,EAAA,EAAAD,CAAA3E,KAAAyE,IACjBxF,EAAA0F,OAAAE,EAAA,EAAAF,CAAA3E,KAAA2E,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/E,KAAMC,KACD+E,MAAQ,CACXlE,OAAQ,MAHO7B,mFAQbe,KAAKc,SACPd,KAAKc,OAAOmE,MAAMC,0BAA2B,EAC7ClF,KAAKc,OAAOqE,aAAaC,gBAAgB9G,MAAM+G,QAAU,6CAIhDC,GACX5F,QAAQC,IAAI2F,GAERtF,KAAKc,QACPd,KAAKc,OAAOyE,OAAOD,wCAIVnE,GACXzB,QAAQC,IAAIwB,oCAGL,IAAAhC,EAAAa,KAAAwF,EAC0DxF,KAAKC,MAAMtB,UAApES,EADDoG,EACCpG,YAAaF,EADdsG,EACctG,SAAUF,EADxBwG,EACwBxG,YAAaH,EADrC2G,EACqC3G,iBACpB,IAAI4G,wBAAsB,CAChDrH,IAAKsH,cAAYC,YAAY,QAK/B,OAFAjG,QAAQC,IAAI,oBAGVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE6F,MAAI,EACJC,WAAW,EACXC,eAAe,EACfC,iBAAiB,EACjBC,UAAU,EACVC,UAAU,EAEVC,IAAK,SAAA/E,GACHhC,EAAK2B,OAASK,GAAKA,EAAEgF,gBAGvBvG,EAAAC,EAAAC,cAACsG,EAAD,CAAevH,iBAAkBA,IACjCe,EAAAC,EAAAC,cAACuG,EAAD,MACAzG,EAAAC,EAAAC,cAACwG,EAAD,MACCtH,EAAcY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaf,YAAaA,IAAkB,KAC3DY,EAAAC,EAAAC,cAACyG,EAAD,CAASnH,YAAaA,IACtBQ,EAAAC,EAAAC,cAAC0G,EAAD,CAAMtH,SAAUA,YArDAuH,yGCWlBC,EACJ9G,EAAAC,EAAAC,cAAA6G,EAAA,GAAMC,QArBoB,SAAAlG,GAAmB,IAAX4C,EAAW5C,EAAhBL,IAChB,QAATiD,EACFuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAA8ByD,KAAK,SAAAE,GAA0B,IAAdC,EAAcD,EAAvBE,QACpC1C,EAAe2C,YAAYF,KAEX,cAAT3D,EACTuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAAoCyD,KAAK,SAAAM,GAAgC,IAApBC,EAAoBD,EAA7BF,QAC1C1C,EAAe2C,YAAYE,KAEX,iBAAT/D,EACTuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAAmCyD,KAAK,SAAAQ,GAA+B,IAAnBC,EAAmBD,EAA5BJ,QACzC1C,EAAe2C,YAAYI,KAEX,SAATjE,GACTuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAA+ByD,KAAK,SAAAU,GAA2B,IAAfC,EAAeD,EAAxBN,QACrC1C,EAAe2C,YAAYM,OAO7B7H,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,OAAf,OACAT,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,aAAf,aACAT,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,gBAAf,gBACAT,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,QAAf,SAoBEsH,EACJ/H,EAAAC,EAAAC,cAAA6G,EAAA,GAAMC,QAjBmB,SAAAgB,GAAmB,IAAXtE,EAAWsE,EAAhBvH,IACf,UAATiD,EACFuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAAsCyD,KAAK,SAAAe,GAA+B,IAAnBC,EAAmBD,EAA5BX,QAC5C1C,EAAeuD,eAAeD,KAEd,kBAATxE,EACTuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAA6CyD,KAAK,SAAAkB,GAAsC,IAA1BC,EAA0BD,EAAnCd,QACnD1C,EAAeuD,eAAeE,KAEd,eAAT3E,GACTuD,EAAA1F,EAAA,GAAA2F,KAAAD,EAAAE,EAAA1D,KAAA,aAA2CyD,KAAK,SAAAoB,GAAoC,IAAxBC,EAAwBD,EAAjChB,QACjD1C,EAAeuD,eAAeI,OAOhCvI,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,SAAf,SACAT,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,iBAAf,iBACAT,EAAAC,EAAAC,cAAA6G,EAAA,EAAMe,KAAN,CAAWrH,IAAI,cAAf,eA0CW+H,EAtCdlH,YAAO,2BAEN,SAAAkH,IAAc,IAAAnJ,EAAA,OAAA0F,OAAAC,EAAA,EAAAD,CAAA3E,KAAAoI,IACZnJ,EAAA0F,OAAAE,EAAA,EAAAF,CAAA3E,KAAA2E,OAAAG,EAAA,EAAAH,CAAAyD,GAAArD,KAAA/E,QACKgF,MAAQ,GAFD/F,qHAOL,IAAAuG,EACiCxF,KAAKC,MAAMtB,UAC7C0J,GAFC7C,EACC2B,YADD3B,EACcuC,eACL,GAAAO,OAAMC,IAAOC,QAAb,KAAAF,OAAwBtI,KAAKC,MAAMwI,UAAYzI,KAAKC,MAAMwI,UAAY,GAAtE,MAChB,OACE7I,EAAAC,EAAAC,cAAA,OAAK2I,UAAWJ,GACdzI,EAAAC,EAAAC,cAAA4I,EAAA,GAAUC,QAASjC,GACjB9G,EAAAC,EAAAC,cAAA8I,EAAA,GAAQtF,KAAK,UAAUhF,MAAO,CAAEuK,YAAa,GAAIC,aAAc,KAA/D,0BACyBlJ,EAAAC,EAAAC,cAAAiJ,EAAA,GAAMzF,KAAK,WAGtC1D,EAAAC,EAAAC,cAAA4I,EAAA,GAAUC,QAAShB,GACjB/H,EAAAC,EAAAC,cAAA8I,EAAA,GAAQtF,KAAK,WAAb,6BAC4B1D,EAAAC,EAAAC,cAAAiJ,EAAA,GAAMzF,KAAK,mBApB3B9C,sCC7BPwI,EA3Bd9H,YAAO,eACPwD,yNAEC2D,qBAAgBE,IAAOU,wBAAehK,EAAKgB,MAAMwI,UAAYxJ,EAAKgB,MAAMwI,UAAY,gFAE3E,IACCnJ,EAAiBU,KAAKC,MAAMtB,UAA5BW,aADDoB,EAEkCpB,GAErC,CAAEyD,KAAM,KAAMC,IAAK,KAAMC,OAAQ,KAAMN,UAAW,MAF9CI,EAFDrC,EAECqC,KAAMC,EAFPtC,EAEOsC,IAAKC,EAFZvC,EAEYuC,OAAQN,EAFpBjC,EAEoBiC,UAI3B,OACE/C,EAAAC,EAAAC,cAAA,OAAK2I,UAAWzI,KAAKqI,YACnBzI,EAAAC,EAAAC,cAAA,WACGmD,EAASrD,EAAAC,EAAAC,cAAA,QAAM2I,UAAWF,IAAOW,gBAAxB,2BAA6CjG,EAA7C,UAA+D,KAGxEN,EAAY/C,EAAAC,EAAAC,cAAA,QAAM2I,UAAWF,IAAOW,gBAAxB,qBAA4CvG,EAA5C,UAAiE,KAC7EI,EAAOnD,EAAAC,EAAAC,cAAA,QAAM2I,UAAWF,IAAOW,gBAAxB,qBAA4CnG,GAAe,KAClEC,EAAMpD,EAAAC,EAAAC,cAAA,QAAM2I,UAAWF,IAAOW,gBAAxB,qBAA4ClG,GAAc,MAEnEpD,EAAAC,EAAAC,cAAA,OAAK2I,UAAWF,IAAOY,gBAAvB,8BAnBkB1C,yCCqBP2C,eAhBjB,SAAAA,EAAYnJ,GAAc,IAAAhB,EAAA,OAAA0F,OAAAC,EAAA,EAAAD,CAAA3E,KAAAoJ,IACxBnK,EAAA0F,OAAAE,EAAA,EAAAF,CAAA3E,KAAA2E,OAAAG,EAAA,EAAAH,CAAAyE,GAAArE,KAAA/E,KAAMC,KACD+E,MAAQ,GAFW/F,wEAMxB,OACEoK,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACC,EAAD,CAASb,UAAWF,KAAOC,UAC3Ba,EAAA,cAACE,EAAD,CAAad,UAAWF,KAAOU,cAC/BI,EAAA,cAACG,EAAD,cAXUC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCNnCC,IAASC,OACPpK,EAAAC,EAAAC,cAACmK,EAAA,EAAazK,EACZI,EAAAC,EAAAC,cAACoK,GAAD,OAEFC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC,gCEjInBC,EAAAC,QAAAC,2BCCAF,EAAAC,QAAA,CAAkB1B,YAAA,iCAAAC,eAAA,oCAAAC,eAAA,yDCAlBuB,EAAAC,QAAA,CAAkBnC,QAAA,qBAAAS,YAAA,8CCAlByB,EAAAC,QAAA,CAAkBnC,QAAA","file":"static/js/main.d77d47ed.chunk.js","sourcesContent":["import { observable, action } from 'mobx';\n\nconst cesiumAccessToken =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJiOGQ2NzAwYS05MDY4LTRmYzMtYTcxZi0wNjNiYmE3MGM5OWYiLCJpZCI6NTc3Nywic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTU0NDE1MzY1NH0.wVfPywSemmFgFwPErzK5ovEqAcrXFNsfr59leudVLsI';\nconst td_img_imageryProvider = {\n  url:\n    'http://t0.tianditu.gov.cn/img_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=img&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=e60679f6e9718d3426f745fd8cd94cbd',\n  layer: 'tdtBasicLayer',\n  style: 'default',\n  format: 'image/jpeg',\n  tileMatrixSetID: 'GoogleMapsCompatible',\n  maximumLevel: 18\n};\nconst td_cia_imageryProvider = {\n  url:\n    'http://t0.tianditu.gov.cn/cia_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=cia&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default.jpg&tk=e60679f6e9718d3426f745fd8cd94cbd',\n  layer: 'tdtAnnoLayer',\n  style: 'default',\n  format: 'image/jpeg',\n  tileMatrixSetID: 'GoogleMapsCompatible',\n  maximumLevel: 18\n};\nconst geoJsonData = null;\nconst czmlData = null;\nconst destination = null;\nconst positionData = null;\n\nclass AppViewer {\n  cesiumAccessToken = cesiumAccessToken;\n  td_img_imageryProvider = td_img_imageryProvider;\n  td_cia_imageryProvider = td_cia_imageryProvider;\n  imageryProviders = [td_img_imageryProvider, td_cia_imageryProvider];\n\n  @observable czmlData = czmlData;\n  @observable geoJsonData = geoJsonData;\n  @observable destination = destination;\n  @observable positionData = positionData;\n\n  @action\n  setDestination = destination => (this.destination = destination);\n  @action\n  setCzmlData = czmlData => (this.czmlData = czmlData);\n  @action\n  setGeoJsonData = geoJsonData => (this.geoJsonData = geoJsonData);\n  @action\n  setPositionData = positionData => (this.positionData = positionData);\n}\n\nexport default new AppViewer();\n","import appViewer from './modules/appViewer';\n\nexport default {\n  appViewer\n};\n","import React, { PureComponent } from 'react';\nimport { WebMapTileServiceImageryProvider } from 'cesium';\nimport { ImageryLayer, ImageryLayerCollection } from 'resium';\n// import memoize from \"memoize-one\";\n// console.log(React.memo);\n\n// const imageryProvider = memoize(imageryProvider => new WebMapTileServiceImageryProvider(imageryProvider));\nconst imageryProvider = imageryProvider => new WebMapTileServiceImageryProvider(imageryProvider);\n\n// const ImageryLayers = ({ imageryProviders }) => {\n//   return (\n//     <ImageryLayerCollection>\n//       {imageryProviders.map((item, i) => {\n//         return <ImageryLayer key={i} imageryProvider={imageryProvider(item)} />;\n//       })}\n//     </ImageryLayerCollection>\n//   );\n// };\n\nclass ImageryLayers extends PureComponent {\n  render() {\n    console.log('ImageryLayers render');\n    return (\n      <ImageryLayerCollection>\n        {this.props.imageryProviders.map((item, i) => {\n          return <ImageryLayer key={i} imageryProvider={imageryProvider(item)} />;\n        })}\n      </ImageryLayerCollection>\n    );\n  }\n}\n\nexport default ImageryLayers;\n","import React from 'react';\nimport { GeoJsonDataSource, withCesium } from 'resium';\n\nconst GeoJson = ({ cesium, geoJsonData }) => {\n  return geoJsonData ? (\n    <GeoJsonDataSource data={geoJsonData} onLoad={geoJsonData => cesium.viewer.flyTo(geoJsonData)} />\n  ) : null;\n};\n\nexport default withCesium(GeoJson);\n","import React from 'react';\nimport { CzmlDataSource, withCesium } from 'resium';\n\nconst Czml = ({ cesium, czmlData }) => {\n  return czmlData ? (\n    <CzmlDataSource data={czmlData} onLoad={CzmlDataSource => cesium.viewer.flyTo(CzmlDataSource)} />\n  ) : null;\n};\n\nexport default withCesium(Czml);\n","import React, { PureComponent } from 'react';\nimport { inject } from 'mobx-react';\nimport { KeyboardEventModifier, ScreenSpaceEventType, Ellipsoid, defined, Math as CesiumMath, Globe } from 'cesium';\nimport { ScreenSpaceEventHandler, ScreenSpaceEvent, withCesium } from 'resium';\n\n/**\n *获取实例的二维笛卡尔点的经度、纬度、相机高度、海拔高度\n *\n * @param {*} camera\n * @param {*} globe\n * @param {*} Cartesian2\n * @param {*} [ellipsoid=Ellipsoid.WGS84]\n * @returns\n */\nconst getMousePointPosition = (camera, globe, Cartesian2, ellipsoid = Ellipsoid.WGS84) => {\n  // 通过指定的椭球或者地图对应的坐标系，将鼠标的二维坐标转换为对应椭球体三维坐标\n  const cartesian = camera.pickEllipsoid(Cartesian2);\n  if (!defined(cartesian)) return null;\n\n  // 将笛卡尔坐标转换为地理坐标\n  const cartographic = ellipsoid.cartesianToCartographic(cartesian);\n  // 将弧度转为度的十进制度表示\n  const longitude = CesiumMath.toDegrees(cartographic.longitude).toFixed(6);\n  const latitude = CesiumMath.toDegrees(cartographic.latitude).toFixed(6);\n  // 获取海拔高度\n  const elevation = Math.ceil(globe.getHeight(cartographic));\n  // 获取相机高度\n  const height = Math.ceil(camera.positionCartographic.height) - elevation;\n\n  return {\n    long: longitude,\n    lat: latitude,\n    height: height,\n    elevation: elevation\n  };\n};\n\n@inject('appViewer')\nclass EventHandler extends PureComponent {\n  _handleEvent(e) {\n    console.log(e);\n  }\n\n  _handleMouseMoveEvent({ endPosition }) {\n    const {\n      cesium: { camera, globe },\n      appViewer: { setPositionData }\n    } = this.props;\n    const positionData = getMousePointPosition(camera, globe, endPosition);\n    if (!positionData) return false;\n    setPositionData(positionData);\n  }\n\n  render() {\n    return (\n      <ScreenSpaceEventHandler>\n        <ScreenSpaceEvent action={this._handleMouseMoveEvent.bind(this)} type={ScreenSpaceEventType.MOUSE_MOVE} />\n      </ScreenSpaceEventHandler>\n    );\n  }\n}\n\nexport default withCesium(EventHandler);\n","import React, { PureComponent } from 'react';\nimport { Color, Cartesian3 } from 'cesium';\nimport { Entity, PointGraphics, EntityDescription } from 'resium';\n\nclass Entitys extends PureComponent {\n  render() {\n    const entityPosition = Cartesian3.fromDegrees(105.0707383, 30.7117244, 100);\n    return (\n      <Entity name=\"Sokyo\" position={entityPosition}>\n        <PointGraphics pixelSize={25} color={Color.CRIMSON} outlineWidth={5} outlineColor={Color.LIGHTCORAL} />\n        <EntityDescription>\n          <h1>Hello, world.</h1>\n          <p>JSX is available here!</p>\n        </EntityDescription>\n      </Entity>\n    );\n  }\n}\n\nexport default Entitys;\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Ion, Cartesian3, CesiumTerrainProvider, IonResource, Color } from 'cesium';\nimport { Viewer, CameraFlyTo, Cesium3DTileset } from 'resium';\nimport appViewerStore from '@/stores/modules/appViewer';\nimport ImageryLayers from './ImageryLayers';\nimport GeoJson from './GeoJson';\nimport Czml from './Czml';\nimport EventHandler from './EventHandler';\nimport Entitys from './Entitys';\n\nIon.defaultAccessToken = appViewerStore.cesiumAccessToken;\n\n@inject('appViewer')\n@observer\nclass AppViewer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewer: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.viewer) {\n      this.viewer.scene.debugShowFramesPerSecond = true;\n      this.viewer.cesiumWidget.creditContainer.style.display = 'none';\n    }\n  }\n\n  _handleReady(tileset) {\n    console.log(tileset);\n\n    if (this.viewer) {\n      this.viewer.zoomTo(tileset);\n    }\n  }\n\n  _handleEvent(e) {\n    console.log(e);\n  }\n\n  render() {\n    const { geoJsonData, czmlData, destination, imageryProviders } = this.props.appViewer;\n    const terrainProvider = new CesiumTerrainProvider({\n      url: IonResource.fromAssetId(3956)\n    });\n\n    console.log('AppViewer render');\n\n    return (\n      <Viewer\n        full\n        animation={false}\n        shouldAnimate={true}\n        baseLayerPicker={false}\n        timeline={false}\n        geocoder={false}\n        // terrainProvider={terrainProvider}\n        ref={e => {\n          this.viewer = e && e.cesiumElement;\n        }}\n      >\n        <ImageryLayers imageryProviders={imageryProviders} />\n        <EventHandler />\n        <Entitys />\n        {destination ? <CameraFlyTo destination={destination} /> : null}\n        <GeoJson geoJsonData={geoJsonData} />\n        <Czml czmlData={czmlData} />\n        {/* <Cesium3DTileset url={IonResource.fromAssetId(5714)} onReady={this._handleReady.bind(this)} /> */}\n      </Viewer>\n    );\n  }\n}\n\nexport default AppViewer;\n","import React, { PureComponent } from 'react';\nimport { Menu, Dropdown, Button, Icon } from 'antd';\nimport { inject } from 'mobx-react';\nimport styles from './index.module.css';\nimport appViewerStore from '@/stores/modules/appViewer';\n\nconst handleCzmlMenuClick = ({ key: type }) => {\n  if (type === 'Box') {\n    import('@/data/czml/czmlBox').then(({ default: czmlBox }) => {\n      appViewerStore.setCzmlData(czmlBox);\n    });\n  } else if (type === 'Satellite') {\n    import('@/data/czml/satelliteCzml').then(({ default: satelliteCzml }) => {\n      appViewerStore.setCzmlData(satelliteCzml);\n    });\n  } else if (type === 'DynamicPoint') {\n    import('@/data/czml/dynamicPoint').then(({ default: dynamicPoint }) => {\n      appViewerStore.setCzmlData(dynamicPoint);\n    });\n  } else if (type === 'Path') {\n    import('@/data/czml/pathCzml').then(({ default: pathCzml }) => {\n      appViewerStore.setCzmlData(pathCzml);\n    });\n  }\n};\n\nconst czmlMenu = (\n  <Menu onClick={handleCzmlMenuClick}>\n    <Menu.Item key=\"Box\">Box</Menu.Item>\n    <Menu.Item key=\"Satellite\">Satellite</Menu.Item>\n    <Menu.Item key=\"DynamicPoint\">DynamicPoint</Menu.Item>\n    <Menu.Item key=\"Path\">Path</Menu.Item>\n  </Menu>\n);\n\nconst handleGeoJsonClick = ({ key: type }) => {\n  if (type === 'Point') {\n    import('@/data/geoJson/pointGeoJson').then(({ default: pointGeoJson }) => {\n      appViewerStore.setGeoJsonData(pointGeoJson);\n    });\n  } else if (type === 'Simple Styles') {\n    import('@/data/geoJson/simplestylesGeojson').then(({ default: simplestylesGeojson }) => {\n      appViewerStore.setGeoJsonData(simplestylesGeojson);\n    });\n  } else if (type === 'Population') {\n    import('@/data/geoJson/statestopoGeojson').then(({ default: statestopoGeojson }) => {\n      appViewerStore.setGeoJsonData(statestopoGeojson);\n    });\n  }\n};\n\nconst geoJsonMenu = (\n  <Menu onClick={handleGeoJsonClick}>\n    <Menu.Item key=\"Point\">Point</Menu.Item>\n    <Menu.Item key=\"Simple Styles\">Simple Styles</Menu.Item>\n    <Menu.Item key=\"Population\">Population</Menu.Item>\n  </Menu>\n);\n\n@inject('appViewer')\nclass ToolBar extends PureComponent {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { setCzmlData, setGeoJsonData } = this.props.appViewer;\n    const _className = `${styles.toolbar} ${this.props.className ? this.props.className : ''} `;\n    return (\n      <div className={_className}>\n        <Dropdown overlay={czmlMenu}>\n          <Button type=\"primary\" style={{ marginRight: 10, marginBottom: 10 }}>\n            Render czml and fly to <Icon type=\"down\" />\n          </Button>\n        </Dropdown>\n        <Dropdown overlay={geoJsonMenu}>\n          <Button type=\"primary\">\n            Render geojson and fly to <Icon type=\"down\" />\n          </Button>\n        </Dropdown>\n        {/* <Button\n          type=\"primary\"\n          style={{ marginLeft: 10 }}\n          onClick={event => {\n            setGeoJsonData(pointGeoJson);\n          }}\n        >\n          Render geojson and fly to\n        </Button> */}\n      </div>\n    );\n  }\n}\n\nexport default ToolBar;\n","import React, { Component } from 'react';\nimport styles from './index.module.css';\nimport { inject, observer } from 'mobx-react';\n\n@inject('appViewer')\n@observer\nclass LocationBar extends Component {\n  _className = `${styles.locationbar} ${this.props.className ? this.props.className : ''} `;\n\n  render() {\n    const { positionData } = this.props.appViewer;\n    const { long, lat, height, elevation } = positionData\n      ? positionData\n      : { long: null, lat: null, height: null, elevation: null };\n\n    return (\n      <div className={this._className}>\n        <div>\n          {height ? <span className={styles.locationcamera}>视点高：{height}米</span> : null}\n          {/* {height ? <span className={styles.locationcamera}>俯仰角：-34度</span> : null} */}\n          {/* {height ? <span className={styles.locationcamera}>视角方向：86度</span> : null} */}\n          {elevation ? <span className={styles.locationcamera}>海拔：{elevation}米</span> : null}\n          {long ? <span className={styles.locationcamera}>经度：{long}</span> : null}\n          {lat ? <span className={styles.locationcamera}>纬度：{lat}</span> : null}\n        </div>\n        <div className={styles.distancelegend}>比例尺</div>\n      </div>\n    );\n  }\n}\n\nexport default LocationBar;\n","import * as React from 'react';\nimport { hot } from 'react-hot-loader/root';\n\nimport AppViewer from './containers/AppViewer';\nimport ToolBar from './containers/ToolBar';\nimport LocationBar from './containers/LocationBar';\nimport styles from './App.module.css';\n\ninterface Props {}\n\nclass App extends React.Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <>\n        <ToolBar className={styles.toolbar} />\n        <LocationBar className={styles.locationbar} />\n        <AppViewer />\n      </>\n    );\n  }\n}\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport stores from './stores';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <Provider {...stores}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = Cesium;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locationbar\":\"LocationBar_locationbar__3Qpd2\",\"locationcamera\":\"LocationBar_locationcamera__q8YUE\",\"distancelegend\":\"LocationBar_distancelegend__2JWXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"App_toolbar__11cl6\",\"locationbar\":\"App_locationbar__3Vkll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"ToolBar_toolbar__1jQkx\"};"],"sourceRoot":""}