{"version":3,"sources":["stores/modules/appViewer.ts","stores/index.ts","components/Loading/index.tsx","utils/serviceWorker.ts","index.tsx","../external \"Cesium\""],"names":["td_img_imageryProvider","url","layer","style","format","tileMatrixSetID","maximumLevel","td_cia_imageryProvider","AppViewer","_dec","observable","ref","_dec2","_dec3","shallow","_class","Object","_home_travis_build_liuvigongzuoshi_cesium_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","cesiumAccessToken","imageryProviders","_home_travis_build_liuvigongzuoshi_cesium_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","positionData","long","lat","height","elevation","_home_travis_build_liuvigongzuoshi_cesium_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_2__","prototype","configurable","enumerable","writable","initializer","action","_this","destination","_this2","czmlData","_this3","geoJsonData","_this4","__webpack_exports__","stores","appViewer","Loading","_ref","_ref$height","_ref$tip","tip","react","className","lineHeight","spin","Boolean","window","location","hostname","match","lazy","React","Suspense","App","Promise","all","__webpack_require__","e","then","bind","ReactDOM","render","react_default","a","createElement","fallback","src_components_Loading","mobx_react_module","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","Cesium"],"mappings":"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","file":"static/js/main.f82346ca.chunk.js","sourcesContent":["import { observable, action } from 'mobx';\n\nconst cesiumAccessToken =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIyMWQ3MWM4Yy01ZGZjLTRkZGEtYjJhMi1hMDdkYWZhN2I2YWYiLCJpZCI6NTc3Nywic2NvcGVzIjpbImFzbCIsImFzciIsImdjIl0sImlhdCI6MTU2MTUzNDQwMX0.h8scGb5fMjG2UFsqvXpQL7YvCheiI-YWUQUyBcQym5s';\nconst td_img_imageryProvider = {\n  url:\n    'https://t0.tianditu.gov.cn/img_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=img&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=e60679f6e9718d3426f745fd8cd94cbd',\n  layer: 'tdtBasicLayer',\n  style: 'default',\n  format: 'image/jpeg',\n  tileMatrixSetID: 'GoogleMapsCompatible',\n  maximumLevel: 18\n};\nconst td_cia_imageryProvider = {\n  url:\n    'https://t0.tianditu.gov.cn/cia_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=cia&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default.jpg&tk=e60679f6e9718d3426f745fd8cd94cbd',\n  layer: 'tdtAnnoLayer',\n  style: 'default',\n  format: 'image/jpeg',\n  tileMatrixSetID: 'GoogleMapsCompatible',\n  maximumLevel: 18\n};\n\nexport type Resource = string | object | Cesium.Resource | undefined;\n\nexport type WebMapTileServiceImagery = {\n  url: string;\n  format?: string;\n  layer: string;\n  style: string;\n  tileMatrixSetID: string;\n  tileMatrixLabels?: any[];\n  clock?: Cesium.Clock;\n  times?: Cesium.TimeIntervalCollection;\n  dimensions?: any;\n  tileWidth?: number;\n  tileHeight?: number;\n  tilingScheme?: Cesium.TilingScheme;\n  rectangle?: Cesium.Rectangle;\n  minimumLevel?: number;\n  maximumLevel?: number;\n  ellipsoid?: Cesium.Ellipsoid;\n  credit?: Cesium.Credit | string;\n  subdomains?: string | string[];\n};\n\ntype Destination = Cesium.Cartesian3 | Cesium.Rectangle | undefined;\n\ninterface IPosition {\n  long: number | string;\n  lat: number | string;\n  height: number;\n  elevation: number;\n}\n\nexport interface IAppViewerState {\n  cesiumAccessToken: string;\n  td_img_imageryProvider: WebMapTileServiceImagery;\n  td_cia_imageryProvider: WebMapTileServiceImagery;\n  imageryProviders: WebMapTileServiceImagery[];\n  czmlData: Resource;\n  geoJsonData: Resource;\n  destination: Destination;\n  positionData: IPosition;\n}\n\nexport class AppViewer implements IAppViewerState {\n  public cesiumAccessToken = cesiumAccessToken;\n  public td_img_imageryProvider = td_img_imageryProvider;\n  public td_cia_imageryProvider = td_cia_imageryProvider;\n  public imageryProviders = [td_img_imageryProvider, td_cia_imageryProvider];\n\n  @observable.ref public czmlData: Resource;\n  @observable.ref public geoJsonData: Resource;\n  @observable.shallow public destination: Destination;\n  @observable public positionData: IPosition;\n\n  constructor() {\n    this.positionData = {\n      long: 0,\n      lat: 0,\n      height: 0,\n      elevation: 0\n    };\n  }\n\n  @action\n  setDestination = (destination: Destination): void => {\n    this.destination = destination;\n  };\n\n  @action\n  setCzmlData = (czmlData: Resource): void => {\n    this.czmlData = czmlData;\n  };\n\n  @action\n  setGeoJsonData = (geoJsonData: Resource): void => {\n    this.geoJsonData = geoJsonData;\n  };\n\n  @action\n  setPositionData = (positionData: IPosition): void => {\n    this.positionData = positionData;\n  };\n}\n\nexport default new AppViewer();\n","import appViewer, { AppViewer } from './modules/appViewer';\n\nexport interface IStores {\n  appViewer: AppViewer;\n}\n\nexport default {\n  appViewer\n};\n","import * as React from 'react';\nimport { Spin } from 'antd';\nimport './index.css';\n\ninterface Iprops {\n  height?: string;\n  tip?: string;\n}\n\nconst Loading: React.FunctionComponent<Iprops> = ({ height = '50px', tip = '' }) => {\n  return (\n    <div className=\"common-loading\" style={{ lineHeight: height, height }}>\n      <Spin tip={tip} />\n    </div>\n  );\n};\n\nexport default Loading;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport stores from './stores';\n\nimport './index.css';\nimport Loading from './components/Loading';\n\nimport * as serviceWorker from './utils/serviceWorker';\n\nconst { lazy, Suspense } = React;\n\nconst App = lazy(() => import('./App'));\n\nReactDOM.render(\n  <Suspense fallback={<Loading height=\"100vh\" tip={'加载中...'} />}>\n    <Provider {...stores}>\n      <App />\n    </Provider>\n  </Suspense>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = Cesium;"],"sourceRoot":""}